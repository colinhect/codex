
-- Three dimensional vector
Vector3<A = Real>
    x, y, z: A

    -- Constructs the vector given the coordinates
    Vector3<A> (x, y, z: A)
        this.x := x
        this.y := y
        this.z := z
    end

    -- Multiplication operator
    ∙ (v: Vector3<A>) ➔ Vector3<A>
        return Vector3<A>(x∙v.x, y∙v.y, z∙v.z)
    end

    -- Division operator
    / (v: Vector3<A>) ➔ Vector3<A>
        return Vector3<A>(x/v.x, y/v.y, z/v.z)
    end
    
    -- Addition operator
    + (v: Vector3<A>) ➔ Vector3<A>
        return Vector3<A>(x+v.x, y+v.y, z+v.z)
    end

    -- Subtraction operator
    - (v: Vector3<A>) ➔ Vector3<A>
        return Vector3<A>(x-v.x, y-v.y, z-v.z)
    end
    
    -- Comparison operator
    = (v: Vector3<A>) ➔ Bool
        return ((x = v.x) ∧ (y = v.y) ∧ (z = v.z))
    end

    -- Computes the magnitude of the vector
    magnitude () ➔ A
        Math.squareRoot(x∙x + y∙y + z∙z)
    end
    
    -- Resizes the vector to unit length
    normalize () ➔ Void
        mag ≔ this.magnitude

        x := x / mag
        y := y / mag
        z := z / mag
    end

end

Vertex

    origin, normal: Vector3

    Vertex (origin, normal: Vector3)
        this.origin := origin
        this.normal := normal
    end

end

Polygon

    vs: [Vertex]
    uvs: [Vector2]

    Polygon (vs: [Vertex], uvs: [Vector2])
        this.vs := vs
        this.uvs := uvs
    end

end

Mesh

    vertices: [Vertex]
    polygons: [Polygon]

    cube () ➔ Mesh (static)
        mesh := Mesh()
        mesh.addPolygon(Polygon([Vertex (Vector3 (0, 1, 3)), Vertex (Vector3 (0, 1, 3)), [Vertex (Vector3 (0, 1, 3))], []))
    
        return mesh
    end

    addVertex (vertex: Vertex) ➔ Vertex
        return vertices.pushBack(vertex)
    end

    addPolygon (polygon: Polygon) ➔ Polygon
        return polygons.pushBack(polygon)
    end

end

Renderer

    queue: [Renderable]

    render () ➔ Void 
        window.swapBuffer()
    
        foreach renderable ∈ queue
            renderable.render()
        end
    end

end

